name: ci
on: ["push"]
jobs:
  ci:
    name: CI
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npm run lint
      - run: npm run build
  test:
    name: Test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npm run test
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
  build:
    name: Build and push
    runs-on: ubuntu-18.04
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
      tag: ${{steps.extract_tag.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Extract ECR tag
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ghactions-${BRANCH}-${SHA})"
        id: extract_tag
        env:
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
          SHA: ${{ github.sha }}
      - run: docker build --tag my-image .
      - name: Push to ECR
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ap-southeast-1
          local-image: my-image
          image: gogovsg:${{steps.extract_tag.outputs.tag}}
  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-18.04
    needs: [ci, test, build]
    steps:
      - uses: actions/checkout@v2
      - run: |
          sed -i -e "s|@REPO|$REPO|g" Dockerrun.aws.json
          sed -i -e "s|@TAG|$TAG|g" Dockerrun.aws.json
          zip -r "deploy.zip" Dockerrun.aws.json
        env:
          REPO: 116366738264.dkr.ecr.ap-southeast-1.amazonaws.com/gogovsg
          TAG: ${{needs.build.outputs.tag}}
